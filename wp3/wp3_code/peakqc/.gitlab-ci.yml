# ############################################################################################################################################################
# ######################################################### Gitlab CI/CD pipeline ###########################################################################
# ############################################################################################################################################################

# This is the Gitlab CI/CD pipeline for the SC FRAMEWORK repository.
# The pipeline is divided into several stages:
# 1. .pre: This stage is used to export variables and to get the sctoolbox version as global variable.
# 2. build: This stage checks if something in the enviroment (setup.py or sctoolbox_env.yml) has changed.
#           If yes then a new docker image will be build and pushed to the container registry.
#           The newly build image is then used for testing later.
#           If no changes were made to the enviroment nothing is build and the latest image is used later on.
# 3. setup: This stage is used to get the container tag for the testing stage.
# 4. test: This stage is used to lint the code and docstrings, to test if the minimal sctoolbox package can still be imported without additional dependencies,
#          to run tests and to test if the notebooks contain output.

stages:
  - .pre
  - build
  - setup
  - test
  - .post

# ############################################################################################################################################################
# ######################################################### pre ##############################################################################################
# ############################################################################################################################################################


ci-variables:
  stage: .pre
  image: python:3.10-alpine3.19
  script:
    - export
  rules:
    - if: $CI

# get the peakqc version as global variable
extract-version:
  stage: .pre
  image: python:3.10
  script:
    - VERSION=$(python -c "import sys; sys.path.append('./peakqc'); from _version import __version__; print(__version__)")
    - echo "BUILD_VERSION=$VERSION"
    - echo "BUILD_VERSION=$VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI

# ############################################################################################################################################################
# ######################################################### build docker image ###############################################################################
# ############################################################################################################################################################

# The build stage below checks if something in the enviroment (setup.py or peakqc_env.yml) has changed.
# If yes then a new docker image will be build and pushed to the container registry.
# The newly build image is then used for testing later.
# If no changes were made to the enviroment nothing is build and the latest image is used later on.

# build job
build:
  stage: build
  image: docker:latest # image as building environment
  needs: [extract-version]
  tags:
    - sctoolbox
  services:
      - name: "docker:dind" # docker in docker to build
        alias: docker
  before_script:
      - echo $BUILD_VERSION
      - apk update && apk add git # install git for authentification and pushing to registry
      - apk update -qq && apk add git
      - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin # login to registry
  script:
      - >
        if [ "$CI_COMMIT_BRANCH" == "main" ]; then
          docker build --pull -t "$CI_REGISTRY_IMAGE:$BUILD_VERSION" -t "$CI_REGISTRY_IMAGE:latest" . # build the image from Dockerfile in the repository
          docker push --all-tags "$CI_REGISTRY_IMAGE" # push image to registry
        elif [ "$CI_COMMIT_BRANCH" == "dev" ]; then
          docker build --pull -t "$CI_REGISTRY_IMAGE:dev" . # build the image from Dockerfile in the repository
          docker push --all-tags "$CI_REGISTRY_IMAGE" # push image to registry
        elif [ "$CI_COMMIT_BRANCH" != "main" ] && [ "$CI_COMMIT_BRANCH" != "dev" ]; then
          docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH" . # build the image from Dockerfile in the repository
          docker push --all-tags "$CI_REGISTRY_IMAGE" # push image to registry
        else
          echo "No image will be build."
        fi

  rules:
    - if: $CI_COMMIT_BRANCH
      changes:  # if any of the files were changed
        - setup.py
        - peakqc_env.yml
        - Dockerfile
        - MANIFEST.in
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_SLUG == 'main'  # all MR to main


# ############################################################################################################################################################
# ######################################################### setup #############################################################################################
# ############################################################################################################################################################

# The setup stage is used to get the container tag for the testing stage.
# The container tag is determined by the branch name or the merge request id.
# The tag is then written to a file and used as an artifact for the testing stage.
get-container-tag:
  stage: setup
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - ALL_TAGS=$(crane ls $CI_REGISTRY_IMAGE)
  script:
    - echo $ALL_TAGS
    - > 
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then 
          echo "DYNAMIC_IMAGE_TAG=$BUILD_VERSION (commit on: $CI_COMMIT_BRANCH)"
          echo "DYNAMIC_IMAGE_TAG=$BUILD_VERSION" >> build.env
      elif [ "$CI_COMMIT_BRANCH" == "dev" ]; then 
          echo "DYNAMIC_IMAGE_TAG=dev (commit on: $CI_COMMIT_BRANCH)"
          echo "DYNAMIC_IMAGE_TAG=dev" >> build.env
      elif [ "$CI_COMMIT_BRANCH" != "main" ] && [ "$CI_COMMIT_BRANCH" != "dev" ] && [ -n "$CI_COMMIT_BRANCH" ]; then 
          if echo "$ALL_TAGS" | grep -qF "$CI_COMMIT_BRANCH"; then
              echo "DYNAMIC_IMAGE_TAG=$CI_COMMIT_BRANCH (commit on: $CI_COMMIT_BRANCH)"
              echo "DYNAMIC_IMAGE_TAG=$CI_COMMIT_BRANCH" >> build.env
          else 
              echo "DYNAMIC_IMAGE_TAG=dev (commit on: $CI_COMMIT_BRANCH, has no image. Falling back to dev tag)"
              echo "DYNAMIC_IMAGE_TAG=dev" >> build.env
          fi
      elif [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then 
          if [ "$CI_COMMIT_REF_NAME" == "dev" ]; then 
              echo "DYNAMIC_IMAGE_TAG=dev (merge request: $CI_COMMIT_REF_NAME)"
              echo "DYNAMIC_IMAGE_TAG=dev" >> build.env
          elif [ "$CI_COMMIT_REF_NAME" != "dev" ]; then
              echo "all tags: $ALL_TAGS"
              echo "Reference branch: $CI_COMMIT_REF_NAME" 
              if echo "$ALL_TAGS" | grep -qF "$CI_COMMIT_REF_NAME"; then
                  echo "DYNAMIC_IMAGE_TAG=$CI_COMMIT_REF_NAME (merge request: $CI_COMMIT_REF_NAME)"
                  echo "DYNAMIC_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> build.env
              else 
                  echo "DYNAMIC_IMAGE_TAG=dev (merge request: $CI_COMMIT_REF_NAME, has no image. Falling back to dev tag)"
                  echo "DYNAMIC_IMAGE_TAG=dev" >> build.env
              fi
          fi
      else 
          echo "DYNAMIC_IMAGE_TAG=latest (unknown action)"
          echo "DYNAMIC_IMAGE_TAG=latest" >> build.env
      fi

  artifacts:
    reports:
      dotenv: build.env

  rules:
    - if: $CI

# ############################################################################################################################################################
# ######################################################### test #############################################################################################
# ############################################################################################################################################################

lint:
  image: 
    name: python:3.10 # pybedtools is not compatible with python 3.11
    entrypoint: [ '/bin/bash', '-c', 'ln -snf /bin/bash /bin/sh && /bin/bash -c $0' ]  # Fixes shell not found error (See Issue #129)
  inherit:
    default: false # do not inherit before_script
  stage: test
  tags:
    - coverage
  script:
    - python --version
    - pip install flake8
    - pip install pydoclint>=0.1.7
    - pip install flake8-docstrings  # adds pydocstyle to flake
    - flake8 peakqc setup.py tests --ignore=E501,W503,D202,DOC301,DOC105 --docstring-convention numpy --show-source --extend-exclude=peakqc/data,tests/data
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # all MR
      changes:
      - setup.py
      - tests/*.py
      - peakqc/*.py


# Run test coverage
test coverage:
  stage: test
  image: "$CI_REGISTRY_IMAGE:$DYNAMIC_IMAGE_TAG"
  tags:
    - coverage
  coverage: '/TOTAL.*\s(\d*.\d*\%)/'
  script:
    - pip install .
    - pytest --cov-report=term --cov=./peakqc . --junitxml=pytest.xml --cov-report html:htmlcov --html=pytest.html --durations=0  # durations=0 shows the ranked duration of all tests for improving compute time
  artifacts:
    when: always
    paths:
      - pytest.xml
      - pytest.html
      - htmlcov
    reports:
      junit: pytest.xml
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" # commits to dev (for coverage)
      changes:
      - tests/*.py
      - peakqc/*.py
    - if: $CI_COMMIT_BRANCH != "dev" && $CI_PIPELINE_SOURCE == "merge_request_event"  #all merge requests with changes
      changes:
      - tests/*.py
      - peakqc/*.py
    - when: manual
      allow_failure: True


#In addition to CHANGES.rst, the _version.py file must be changed in merge requests to main in order to make a new version
check-version:
  image:
    name: cicirello/alpine-plus-plus
    entrypoint: [ "" ]  #hack from https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4027
  inherit:
    default: false
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff-tree --name-only -r "HEAD..origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" > changed_files.txt
    - cat changed_files.txt
    - if grep -q "peakqc/_version.py" changed_files.txt; then echo "The 'peakqc/_version.py' file was changed."; else echo "The 'peakqc/_version.py' file must be changed for merge requests to main!"; exit 1; fi
    - version=$(sed -e 's/.*\"\(.*\)\".*/\1/' <<< $(head -n 1 peakqc/_version.py)) # Get version from _version.py file
    - echo ${version} # for debugging
    - if [[ ! ${version} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then exit 1; fi
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" # only on MR to main

# ############################################################################################################################################################
# ######################################################### .post #############################################################################################
# ############################################################################################################################################################

# clean up
# This job is used to delete orphan tags from the registry.
# It is used to delete tags that are not associated with a branch or a semantic versioning.
# The job is only executed if the commit is on the main branch.
# For the cleanupo the branches and tags are fetched from the repository via the Gitlab API.
# Requests are made by using curl and the jq package is used to parse the json responses.
# The tags are then compared against the branches and deleted if they are not associated with a branch or a semantic versioning.
# The job uses crane (https://github.com/google/go-containerregistry/tree/main/cmd/crane) to delete the tags from the registry.
cleanup-orphan-tags:
  stage: .post
  image: alpine:latest
  before_script:
    # Install curl and jq
    - apk add --no-cache curl jq
    # Install crane
    - curl -L "https://github.com/google/go-containerregistry/releases/download/v0.7.0/go-containerregistry_Linux_x86_64.tar.gz" -o /tmp/crane.tar.gz
    - tar -zxvf /tmp/crane.tar.gz -C /usr/local/bin/ crane
    - rm /tmp/crane.tar.gz
    - crane version
    # Login to the registry
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      # Fetch all branch names
      BRANCHES=$(curl --silent --header "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.gwdg.de/api/v4/projects/$CI_PROJECT_ID/repository/branches" | jq -r '.[].name')
      echo "Branches:"
      echo "$BRANCHES"

      # Fetch repository ID for Docker Registry
      repo_id=$(curl --silent --header "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.gwdg.de/api/v4/projects/$CI_PROJECT_ID/registry/repositories" | jq -r ".[0].id")

      # Fetch all image tags
      TAGS=$(curl --silent --header "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.gwdg.de/api/v4/projects/$CI_PROJECT_ID/registry/repositories/${repo_id}/tags" | jq -r '.[].name')
      echo "Tags:"
      echo "$TAGS"

      # Regular expression for semantic versioning
      SEMVER_REGEX="^([0-9]+)\.([0-9]+)\.([0-9]+)$"

      # Compare tags against branches and skip semantic versioning tags
      for tag in $TAGS; do
        if [[ $tag =~ $SEMVER_REGEX ]] || [[ $tag == "latest" ]] || [[ $tag == "dev" ]]; then
          echo "Tag '$tag' follows semantic versioning or is 'latest' and will be kept."
        elif ! echo "$BRANCHES" | grep -qx "$tag"; then
          echo "Tag '$tag' does not match any branch and does not follow semantic versioning, will be deleted."
          # Use crane to delete the tag
          crane delete "$CI_REGISTRY_IMAGE:$tag"
        else
          echo "Tag '$tag' matches a branch and will not be deleted."
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == "main"  # only for commits to main